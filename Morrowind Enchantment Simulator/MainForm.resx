<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        PXsIBxEGCBAGCQ4JCBEbDTF2Uramdfl1UbWKZdOLZtRlPa2tifm5lvcZAkxMNoVKM4V2U8GLZdV0UMBg
        QqsCAAgeFDgdEzceFTYpHEIwIUcuIEopG0QgGjEgFzEwI0kfGTIIBxAJCQ8IBxAKBxBGL3N1UbWmdvZ4
        UrRlP69lO7BEGI2LZNK0lvUXBElLNYODZrx1UsBKMJRgQqt3U79ZO5QAAAYAAAoAAAgsIEo4JlsvIEwn
        HUEwJEgjGDIhGTAgFzEGCQ4HCg8FBhBpVZ2jdvV3UrJ4UrZ3UbOIZNSJY9NlPrKsivbEqvYZB0RRP3yM
        dLx9Wb1aO5B7Wrt6V7+Mar6LacAYAEAZAEQjCUkjB0wiB0kjCUkXCEIZB0IZB0IZB0QaCUkZCEiri/d8
        Xr2cdsiddstiPpBjP5GJbMlVOZIhCFiIbsiKdboZBkVSPn9RPn1YO5B9WL59Wb17WMCPasCMacCLaMKK
        asOJbMKJbMK9nv+8nv2Sd8CRd72Sd8GQd8GsivZ7YL55Xb16X71jQJBlP5GbeMhjP5NWPJBXOpAiCVm8
        nf/Hq/cXCEIWCUEZB0IYADoZADoYATgYATgXAUIYAEEbAUEYAEAhCUkhCUofB0cjB00WBkMXCEEXCEIW
        B0EZB0wWCEgXCUsYCUcpCFwqCVooB1spCVgeCVgiCFsfCViJa8rIqfiMdLzEqvaMdLp7WMB7Wb17Wb19
        Wb2Mab+OaMDHn/7EnP++nf68nv2+n/+8nv2Sd8DOrf/Or/6SeL6vi/Wtivh8Xr2tivjWrv/Xr/2cdcqd
        d8m9nv+/nv+6n/29nv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>